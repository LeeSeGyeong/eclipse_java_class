package com.kh.chap01_inet.run;

import java.net.InetAddress;
import java.net.UnknownHostException;

public class InetRun {

	public static void main(String[] args) {

		
		/*
		 * * 네트워크(Network) : 여러대의 컴퓨터들이 연결되어있는 통신망 같은 것 
		 * 					   => 이런 네트워크를 통해 서로 간 데이터 교환 가능 ! 
		 * 
		 * * IP 주소 : 네트워크 상에 각 컴퓨터들을 식별해줄 수 있는 번호( 컴퓨터의 주민번호 == 절대 겹치지 않음 == 고유한 번호)
		 * 
		 * * 서버와 클라이언트 
		 * > 서버 : 고객(클라이언트)에게 서비스를 제공해주는 프로그램(클라이언트의 요청을 처리해서 응답해주는)
		 * 
		 * > 클라이언트 : 서버에 요청하는 컴퓨터 ( 서비스를 제공 받는 고객 )
		 * 
		 * 
		 *  - 서버에 요청하기 위해서는 , 요청하고자하는 서버의 IP주소 , 포트번호를 알아야됨 !
		 */
		
		
		// 1) InetAddress : 네트워크정보(ip주소관련)를 확인할 수 있는 클래스 
		
		try { // getLocalHost : 내 PC(지역호스트)에 대한 정보를 반환
			InetAddress localhost = InetAddress.getLocalHost(); //LocalHost == 나의 컴퓨터 
			
			
			// 형태 : 내 pc명 + / 내 IP주소  
			System.out.println(localhost); 
			System.out.println("======= 내 PC명 & 주소 출력  =======");
			
			System.out.println("내 PC명 : "+ localhost.getHostName()); 		//호스트의 이름 반환 
			System.out.println("내 IP주소 : "+ localhost.getHostAddress()); 	//호스트의 ip주소 반환 
			
			System.out.println("\n======= 도메인 명으로 호스트 정보 반환  =======");
			
			//내가 알고있는 도메인을 통해서 그 서버관련된 정보(ip..) 얻기 
			InetAddress googleHost = InetAddress.getByName("www.google.com");
			
			System.out.println("구글 서버명 : "+googleHost.getHostName());
			System.out.println("구글 IP주소 : "+ googleHost.getHostAddress());
			
			
			//도메인을 통해서 그 서버 관련된 것들을 배열로 받을 수 있음 
			
			InetAddress[] naverHost = InetAddress.getAllByName("www.naver.com");
			System.out.println("\n====== 도메인 주소를 통해 배열로 정보를 받기 ======");
			System.out.println("네이버 호스트 갯수 : "+ naverHost.length);
			//길이 2 
			
			for(InetAddress n: naverHost) {
				System.out.println("naver 서버명 : "+n.getHostName());
				System.out.println("naver IP 주소 : "+ n.getHostAddress());
			}
			 
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} 
		
		/*
		 * * 현재 구동중인 서버가 있으면 
		 * 	  클라이언트는 그 서버로 요청보낼 수 있음 => 응답결과 돌아옴!
		 * 
		 *  - 요청과 응답에 의해서 프로그램은 돌아감!("통신"한다 표현)
		 *  - 웹에서 통신방식 : HTTP 프로토콜 통신 
		 *  
		 *  
		 *  * 자바만을 가지고 서버와 클라이언트 간 간단한 통신해보기! (웹 들어가기 전 맛보기!)
		 *    이 때 데이터를 입출력하고자 한다면, 서버와 클라이언트간데 스트림(연경통로)이 필요함! 
		 *    또한 소켓도 필요로 하는데 소켓이란,
		 *    
		 *   * 소켓 : 프로세스 간 통신을 담당하는 것, 스트림을 연결하기 위한 문
		 *     	   (데이터들의 통신을 위한 문 == 소켓)이 필요함
		 *     
		 *   * 소켓프로그래밍 (TCP방식 / UDP 방식)
		 *   
		 *   -TCP방식 : 데이터 전송속도가 느림, 대신 데이터가 정확하고 안정적으로 전달가능 (신뢰성이 요구되는 프로그램 : http, email, webhard.. 누락되면 안되니까)
		 *   -UDP방식 : 데이터 전송속도가 빠름! 신뢰성 없는 데이터 전달될 수 있음!(데이터를 빠른속도로 전송하고자 하는 프로그램 : 실시간동영상서비스) 
		 */
		
	}

}
